<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="com.hypeboy.codemeets.model.dao.UserDao">

	<resultMap type="UserDto" id="user">
		<result column="user_pk" property="userPk" />
		<result column="user_id" property="userId" />
		<result column="user_name" property="userName" />
		<result column="user_active" property="userActive" />
		<result column="user_info_pk" property="userInfoPk" />
		<result column="profile_photo" property="profilePhoto" />
		<result column="email_public" property="emailPublic" />
		<result column="tel_public" property="telPublic"/>
		<result column="provider" property="provider"/>
		<result column="provider_id" property="providerId"/>
	</resultMap>
	
	<resultMap type="ConferenceGroupDto" id="conferenceGroup">
		<result column="group_pk" property="groupPk" />
		<result column="conference_pk" property="conferencePk" />
		<result column="call_start_time" property="callStartTime" />
		<result column="call_end_time" property="callEndTime" />
		<result column="conference_title" property="conferenceTitle" />
		<result column="conference_contents" property="conferenceContents" />		
		<result column="conference_active" property="conferenceActive"/>
		<result column="user_pk" property="userPk"/>
		<result column="group_name" property="groupName"/>
		<result column="group_desc" property="groupDesc"/>
		<result column="manager_id" property="managerId"/>
		<result column="group_url" property="groupUrl"/>
		<result column="total" property="total"/>
	</resultMap>
	
	<resultMap type="ConferenceQuestionDto" id="conferenceQuestion">
		<result column="conference_question_pk" property="conferenceQuestionPk" />
		<result column="conference_question_contents" property="conferenceQuestionContents" />
		<result column="conference_question_date" property="conferenceQuestionDate" />
		<result column="conference_question_update" property="conferenceQuestionUpdate" />
		<result column="conference_pk" property="conferencePk" />
		<result column="conference_title" property="conferenceTitle" />
		<result column="group_pk" property="groupPk" />
		<result column="group_name" property="groupName" />
		<result column="user_pk" property="userPk" />
		<result column="answer_cnt" property="answerCnt" />
		<result column="conference_question_like_cnt" property="conferenceQuestionLikeCnt" />
		<result column="conference_question_like" property="conferenceQuestionLike" />
		<result column="total" property="total"/>
	</resultMap>
	
	<!-- ==================== 개발용 API ======================================== -->

	<select id="devGetUserInfo" parameterType="string" resultMap="user">
		<![CDATA[
			SELECT user_pk, user_id, password, token, user_name,
	   		user_active, user_info_pk, nickname, tel, email, 
	   		profile_photo, email_public, tel_public, provider, provider_id
	        FROM `user` NATURAL JOIN `user_info`
	        WHERE user_id = #{userId}
		]]>
	</select>
	
	<select id="devGetUserInfoAllList" resultMap="user">
		<![CDATA[
			SELECT user_pk, user_id, password, token, user_name,
	   		user_active, user_info_pk, nickname, tel, email, 
	   		profile_photo, email_public, tel_public, provider, provider_id
	        FROM `user` NATURAL JOIN `user_info`
		]]>
	</select>
	
	<!-- ==================== 회원가입 ======================================== -->
	
	<insert id="registUser" parameterType="UserDto">
		INSERT INTO `user`(user_id, `password`, token, user_active, provider, provider_id) 
		VALUES(#{userId}, #{password}, 'token', 1, #{provider}, #{providerId});
	</insert>
	
	<update id="registUserInfo" parameterType="UserDto">
	    INSERT INTO `s08p11d109`.`user_info` (user_name, nickname, tel, email, profile_photo, email_public, tel_public, user_pk) 
	    VALUES(#{userName}, #{nickname}, #{tel}, #{email}, #{profilePhoto}, #{emailPublic}, #{telPublic}, (
	    SELECT user_pk 
	    FROM `user`
	    WHERE user_id = #{userId})
	    );
	</update>
	
	<!-- ==================== ID, Email, Tel 중복 검사 ======================================== -->
	
	<select id="getUserIdOverlap" parameterType="string" resultType="int">
		<![CDATA[
			SELECT count(*)
			FROM `user`
			WHERE user_id = #{userId};
		]]>
	</select>
	
	<select id="getUserTelOverlap" parameterType="string" resultType="int">
		<![CDATA[
			SELECT count(*)
			FROM `user_info`
			WHERE tel = #{tel};
		]]>
	</select>
	
	<select id="getUserEmailOverlap" parameterType="string" resultType="int">
		<![CDATA[
			SELECT count(*)
			FROM `user_info`
			WHERE email = #{email};
		]]>
	</select>
	
	<!-- ==================== ID 찾기 ======================================== -->
	
	<select id="searchIdFromEmail" parameterType="string" resultType="string">
		<![CDATA[
			SELECT user_id
			FROM `user` NATURAL JOIN `user_info`
			WHERE email = #{data};
		]]>
	</select>
	
	<select id="searchIdFromTel" parameterType="string" resultType="string">
		<![CDATA[
			SELECT user_id
			FROM `user` NATURAL JOIN `user_info`
			WHERE tel = #{data};
		]]>
	</select>
	
	<!-- ==================== PW 찾기 및 수정 ======================================== -->
		
	<select id="forgotPwFromEmail" parameterType="string" resultType="int">
		<![CDATA[
			SELECT count(*)
			FROM `user` NATURAL JOIN `user_info`
			WHERE user_id = #{userId} AND email = #{data};
		]]>
	</select>
	
	<select id="forgotPwFromTel" parameterType="string" resultType="int">
		<![CDATA[
			SELECT count(*)
			FROM `user` NATURAL JOIN `user_info`
			WHERE user_id = #{userId} AND tel = #{data};
		]]>
	</select>
	
	<update id="editPw" parameterType="string">
		UPDATE `user`
		SET password = #{password}
		WHERE user_id = #{userId}
	</update>
	
	<!-- ==================== myProfile 조회 ======================================== -->
		
	<select id="getMyProfile" resultMap="user">
		SELECT user_pk, user_id, token, user_name,
   		user_active, user_info_pk, nickname, tel, email, 
   		profile_photo, email_public, tel_public, provider, provider_id
        FROM `user` NATURAL JOIN `user_info`
        WHERE user_pk = #{userPk}
    </select>
	
	<!-- ==================== myProfile 수정 ======================================== -->
			
	<update id="editMyProfile" parameterType="userDto">
		UPDATE `user_info`
		SET profile_photo = #{profilePhoto}, email = #{email}, email_public = #{emailPublic}, 
		tel = #{tel}, tel_public = #{telPublic}, nickname = #{nickname}
		WHERE user_pk = #{userPk}
    </update>

	<!-- ==================== 다른 유저 조회 ======================================== -->

	<select id="getUserInfoList" parameterType="java.util.HashMap" resultMap="user">
		<![CDATA[
		SELECT user_pk, user_id, user_name,
			   user_info_pk, nickname, tel, email,
			   profile_photo, email_public, tel_public
		FROM `user` NATURAL JOIN user_info
		WHERE user_pk IN (${list})

		]]>
	</select>

	<!-- ==================== 자신 회의 참석 기록 조회 ======================================== -->

	<select id="getMyConferenceRecord" resultMap="conferenceGroup">
		<![CDATA[
			SELECT con.group_pk, con.conference_pk, date_format(con.call_start_time, "%Y-%m-%d") as call_start_time,
			 con.conference_title, con.conference_active, gro.group_name, gro.group_url, count(*) OVER() AS total
			FROM `conference` as con NATURAL JOIN `group` as gro
			WHERE con.conference_pk in (
				SELECT conference_pk
			    FROM `conference-user`
			    WHERE user_pk = #{userPk}
				)
			ORDER BY call_start_time DESC
			LIMIT #{nowPage}, #{items};
		]]>
	</select>
	
	<select id="getMyConferenceRecordFilter" resultMap="conferenceGroup">
		<![CDATA[
			SELECT con.group_pk, con.conference_pk, date_format(con.call_start_time, "%Y-%m-%d") as call_start_time,
			 con.conference_title, con.conference_active, gro.group_name, gro.group_url, count(*) OVER() AS total
			FROM `conference` as con NATURAL JOIN `group` as gro
			WHERE con.conference_pk in (
				SELECT conference_pk
			    FROM `conference-user`
			    WHERE user_pk = #{userPk}
				)
			    AND
			    con.group_pk = #{groupPk}
			ORDER BY call_start_time DESC
			LIMIT #{nowPage}, #{items};
		]]>
	</select>

	<!-- ==================== 자신 질문 목록 조회 ======================================== -->
	
	<select id="getMyQuestionRecord" resultMap="conferenceQuestion">
		<![CDATA[
			SELECT Q.conference_question_pk, Q.conference_question_contents, Q.conference_question_date,
			Q.conference_pk, C.conference_title, Q.group_pk, G.group_name, Q.conference_question_update, 
			Q.user_pk, count(A.conference_answer_pk) answer_cnt,
				(SELECT count(*) 
			    FROM conference_question_user L 
			    WHERE Q.conference_question_pk = L.conference_question_pk) conference_question_like_cnt,
			count(*) OVER() AS total
			FROM `conference_question` Q
			LEFT JOIN `conference_answer` A on Q.conference_question_pk = A.conference_question_pk
			LEFT JOIN `conference` C on Q.conference_pk = C.conference_pk
			LEFT JOIN `group` G on C.group_pk = G.group_pk
			WHERE Q.user_pk = #{userPk}
			GROUP BY Q.conference_question_pk, Q.conference_question_contents, Q.conference_question_date,
			Q.conference_question_update, Q.conference_pk, Q.group_pk, Q.user_pk, C.conference_title, G.group_name
			ORDER BY Q.conference_question_date DESC
			LIMIT #{nowPage}, #{items};
		]]>
	</select>
	
	<!-- ==================== 회원탈퇴 ======================================== -->
	
	<update id="resign" parameterType="int">
		UPDATE `user`
		SET user_active = 0
		WHERE user_pk = #{userPk}
    </update>
    
	<!-- ==================== 그룹가입 ======================================== -->
	
	<select id="registGroup" resultType="int">
		INSERT INTO 
		`group-user`(group_user_position, group_pk, user_pk) 
		VALUES (3 ,0, 
			(SELECT user_pk
			FROM `user`
			WHERE user_id = #{userId}));
	</select>
</mapper>

